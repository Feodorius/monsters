{"version":3,"sources":["components/search-box/search-box.component.jsx","components/card/card.component.jsx","components/card-list/card-list.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["SearchBox","placeholder","handleChange","className","onChange","Card","props","alt","src","monster","id","name","email","CardList","monsters","map","App","e","setState","searchField","target","value","state","this","filteredMonsters","filter","toLowerCase","includes","fetch","then","resp","json","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6SAGaA,EAAY,SAAC,GAAD,IAAGC,EAAH,EAAGA,YAAaC,EAAhB,EAAgBA,aAAhB,OACrB,uBACIC,UAAU,SACVF,YAAaA,EACbG,SAAUF,KCJLG,G,YAAO,SAAAC,GAAK,OACrB,sBAAKH,UAAU,iBAAf,UACI,qBAAKI,IAAI,UAAUC,IAAG,+BAA0BF,EAAMG,QAAQC,GAAxC,4BACtB,6BAAKJ,EAAMG,QAAQE,OACnB,4BAAIL,EAAMG,QAAQG,aCHbC,EAAW,SAAAP,GAAK,OACzB,qBAAKH,UAAU,YAAf,SACKG,EAAMQ,SAASC,KAAI,SAAAN,GAAO,OACvB,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,UCiChBM,E,kDAlCb,aAAe,IAAD,8BACZ,gBAOFd,aAAe,SAAAe,GACb,EAAKC,SAAS,CAAEC,YAAaF,EAAEG,OAAOC,SAPtC,EAAKC,MAAQ,CACXR,SAAU,GACVK,YAAa,IAJH,E,0CAYd,WACE,MAAkCI,KAAKD,MAA/BR,EAAR,EAAQA,SAAUK,EAAlB,EAAkBA,YACZK,EAAmBV,EAASW,QAAO,SAAAhB,GAAO,OAAIA,EAAQE,KAAKe,cAAcC,SAASR,MACxF,OACE,sBAAKhB,UAAU,MAAf,UACE,kDACA,cAAC,EAAD,CACEF,YAAY,kBACZC,aAAcqB,KAAKrB,eACrB,cAAC,EAAD,CACEY,SAAUU,S,+BAKlB,WAAqB,IAAD,OAClBI,MAAM,8CACHC,MAAK,SAAAC,GAAI,OAAIA,EAAKC,UAClBF,MAAK,SAAAC,GAAI,OAAI,EAAKZ,SAAS,CAAEJ,SAAUgB,W,GA/B5BE,aCOHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBN,MAAK,YAAkD,IAA/CO,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.2df4b7e8.chunk.js","sourcesContent":["import React from 'react';\r\nimport \"./search-box.styles.css\";\r\n\r\nexport const SearchBox = ({ placeholder, handleChange }) => (\r\n    <input\r\n        className='search'\r\n        placeholder={placeholder}\r\n        onChange={handleChange} />\r\n);\r\n","import React from 'react';\r\nimport './card.styles.css'\r\n\r\nexport const Card = props => (\r\n    <div className='card-container'>\r\n        <img alt='monster' src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`} />\r\n        <h2>{props.monster.name}</h2>\r\n        <p>{props.monster.email}</p>\r\n    </div>\r\n)","import React from 'react';\r\nimport './card-list.styles.css';\r\nimport { Card } from '../card/card.component';\r\n\r\nexport const CardList = props => (\r\n    <div className=\"card-list\">\r\n        {props.monsters.map(monster =>\r\n            <Card key={monster.id} monster={monster} />\r\n        )}\r\n    </div>)\r\n    ;","import './App.css';\r\nimport React, { Component } from 'react';\r\nimport { SearchBox } from './components/search-box/search-box.component';\r\nimport { CardList } from './components/card-list/card-list.component';\r\n\r\nclass App extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      monsters: [],\r\n      searchField: ''\r\n    };\r\n  }\r\n\r\n  handleChange = e => {\r\n    this.setState({ searchField: e.target.value })\r\n  }\r\n\r\n  render() {\r\n    const { monsters, searchField } = this.state;\r\n    const filteredMonsters = monsters.filter(monster => monster.name.toLowerCase().includes(searchField));\r\n    return (\r\n      <div className=\"App\">\r\n        <h1>Monsters Rolodex</h1>\r\n        <SearchBox\r\n          placeholder='search monsters'\r\n          handleChange={this.handleChange} />\r\n        <CardList\r\n          monsters={filteredMonsters} />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  componentDidMount() {\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n      .then(resp => resp.json())\r\n      .then(resp => this.setState({ monsters: resp }));\r\n  }\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}